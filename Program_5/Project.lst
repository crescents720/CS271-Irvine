Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/15/16 15:43:09
Program_5     (Program_5.asm				     Page 1 - 1


				TITLE Program_5     (Program_5.asm)

				; Author: Gregory Mankes
				; Course / Project ID: CS271/Program 5                 Date: 3/14/16
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 = 0000000A			min=10
 = 000000C8			max=200

 = 00000064			lo=100
 = 000003E7			hi=999
 00000000			.data

 00000000 50 72 6F 67 72	programName		byte	"Program 5: Sorting Random Integers",0
	   61 6D 20 35 3A
	   20 53 6F 72 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 00
 00000023 47 72 65 67 6F	programmer		byte	"Gregory Mankes",0
	   72 79 20 4D 61
	   6E 6B 65 73 00

 00000032 54 68 69 73 20	intro_1			byte	"This program generates random numbers in the range [100..999],",0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   2E 2E 39 39 39
	   5D 2C 00
 00000071 64 69 73 70 6C	intro_2			byte	"displays the original list, sorts the list, and calculates the",0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 000000B0 6D 65 64 69 61	intro_3			byte	"median value. Finally, it displays the list sorted in descending order.",0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00

 000000F8 48 6F 77 20 6D	prompt_1		byte	"How many numbers should be generated? [",0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 00
 00000120 2E 2E 2E 00		dotdotdot		byte	"...",0
 00000124 5D 3A 20 00		prompt_2		byte	"]: ",0

 00000128 49 6E 76 61 6C	out_of_range	byte	"Invalid input",0
	   69 64 20 69 6E
	   70 75 74 00

 00000136 00000000		numElements		DWORD	0
 0000013A  000000C8 [		array			DWORD	max		DUP(?)
	    00000000
	   ]

 0000045A 54 68 65 20 55	unSortedTitle	byte	"The Unsorted Random Numbers are: ",0
	   6E 73 6F 72 74
	   65 64 20 52 61
	   6E 64 6F 6D 20
	   4E 75 6D 62 65
	   72 73 20 61 72
	   65 3A 20 00
 0000047C 54 68 65 20 53	sortedTitle		byte	"The Sorted Random Numbers are: ",0
	   6F 72 74 65 64
	   20 52 61 6E 64
	   6F 6D 20 4E 75
	   6D 62 65 72 73
	   20 61 72 65 3A
	   20 00

 0000049C 20 20 20 00		spaces			byte	"   ",0

 000004A0 54 68 65 20 6D	medianString	byte	"The median is: ",0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00

 000004B0 52 65 73 75 6C	goodbye			byte	"Results cerified by Gregory Mankes. Goodbye.",0
	   74 73 20 63 65
	   72 69 66 69 65
	   64 20 62 79 20
	   47 72 65 67 6F
	   72 79 20 4D 61
	   6E 6B 65 73 2E
	   20 47 6F 6F 64
	   62 79 65 2E 00


 00000000			.code
 00000000			main PROC

					; Introduce the user
 00000000  68 000000B0 R		push	OFFSET intro_3
 00000005  68 00000071 R		push	OFFSET intro_2
 0000000A  68 00000032 R		push	OFFSET intro_1
 0000000F  68 00000000 R		push 	OFFSET programName
 00000014  68 00000023 R		push	OFFSET programmer
 00000019  E8 0000009D			call 	introduction

					; Get the user data
 0000001E  68 00000128 R		push	OFFSET out_of_range
 00000023  68 00000124 R		push 	OFFSET prompt_2
 00000028  68 00000120 R		push	OFFSET dotdotdot
 0000002D  68 000000F8 R		push	OFFSET prompt_1
 00000032  68 00000136 R		push	OFFSET numElements
 00000037  E8 000000D3			call 	getData
					
					; Fill the array with random integers
 0000003C  E8 00000000 E		call	Randomize
 00000041  FF 35 00000136 R		push	numElements
 00000047  68 0000013A R		push	OFFSET array
 0000004C  E8 00000124			call	fillArray
					
					; Show all of the elements in the array
 00000051  68 0000049C R		push	OFFSET spaces
 00000056  68 0000045A R		push	OFFSET unSortedTitle
 0000005B  FF 35 00000136 R		push	numElements
 00000061  68 0000013A R		push	OFFSET array	
 00000066  E8 00000210			call	displayList
					
					; Sort the array
 0000006B  FF 35 00000136 R		push	numElements
 00000071  68 0000013A R		push	OFFSET array
 00000076  E8 00000127			call	sortList
					
					; Display the newly sorted array
 0000007B  68 0000049C R		push	OFFSET spaces
 00000080  68 0000047C R		push	OFFSET sortedTitle
 00000085  FF 35 00000136 R		push	numElements
 0000008B  68 0000013A R		push	OFFSET array	
 00000090  E8 000001E6			call	displayList
					
					; Calculate and display the median
 00000095  68 000004A0 R		push	OFFSET medianString
 0000009A  FF 35 00000136 R		push	numElements
 000000A0  68 0000013A R		push	OFFSET array
 000000A5  E8 0000015F			call	displayMedian
					
					; say goodbye
 000000AA  68 000004B0 R		push 	OFFSET goodbye
 000000AF  E8 0000021E			call	farewell

					exit	; exit to operating system
 000000B4  6A 00	   *	    push   +000000000h
 000000B6  E8 00000000 E   *	    call   ExitProcess
 000000BB			main ENDP


				;Procedure to introduce the user and state the purpose of
				;	the program.
				;Receives: offset of: programName, programmer, intro_1, intro_2, intro_3
				;	are passed in on the stack
				;Returns: nothing
				;Preconditions: the strings are set up
				;Registers Changed: none
 000000BB			introduction PROC
 000000BB  55				push	ebp
 000000BC  8B EC			mov		ebp, esp
					
					; save edx
 000000BE  52				push	edx
					
					; prompt the user
 000000BF  8B 55 08			mov		edx, [ebp+8]
 000000C2  E8 00000000 E		call	WriteString
 000000C7  E8 00000000 E		call	Crlf
					
 000000CC  8B 55 0C			mov		edx, [ebp+12]
 000000CF  E8 00000000 E		call	WriteString
 000000D4  E8 00000000 E		call	Crlf
 000000D9  E8 00000000 E		call	Crlf
					
 000000DE  8B 55 10			mov		edx, [ebp+16]
 000000E1  E8 00000000 E		call	WriteString
 000000E6  E8 00000000 E		call	Crlf
					
 000000EB  8B 55 14			mov		edx, [ebp+20]
 000000EE  E8 00000000 E		call	WriteString
 000000F3  E8 00000000 E		call	Crlf
					
 000000F8  8B 55 18			mov		edx, [ebp+24]
 000000FB  E8 00000000 E		call	WriteString
 00000100  E8 00000000 E		call	Crlf
 00000105  E8 00000000 E		call 	Crlf
					
					; restore edx
 0000010A  5A				pop		edx
 0000010B  5D				pop 	ebp
 0000010C  C2 0014			ret 20
 0000010F			introduction ENDP

				;Procedure to get the data from the user within the specified range.
				;Receives: the offsets of: the numElements variable, the prompt strings (1 and 2),
				;	the dotdotdot string, and the out_of_range string on the system stack
				;Returns: The number of elements to be generated in the variable passed in by reference
				;Preconditions: The elements must be passed in system stack in the correct order
				;Registers Changed: none
 0000010F			getData PROC
 0000010F  55				push	ebp
 00000110  8B EC			mov		ebp, esp
					; save eax and edx
 00000112  52				push	edx
 00000113  50				push	eax

 00000114  EB 0D			jmp		getData_validate
 00000116			getData_pushBack:
					; Tell the user that the input is out of range
 00000116  8B 55 18			mov		edx, [ebp+24]
 00000119  E8 00000000 E		call	WriteString
 0000011E  E8 00000000 E		call	Crlf

 00000123			getData_validate:
					; Prompt the user
 00000123  8B 55 0C			mov		edx, [ebp+12]
 00000126  E8 00000000 E		call	WriteString
 0000012B  B8 0000000A			mov		eax, min
 00000130  E8 00000000 E		call	WriteDec
 00000135  8B 55 10			mov		edx, [ebp+16]
 00000138  E8 00000000 E		call	WriteString
 0000013D  B8 000000C8			mov		eax, max
 00000142  E8 00000000 E		call	WriteDec
 00000147  8B 55 14			mov 	edx, [ebp+20]
 0000014A  E8 00000000 E		call	WriteString
					; Get the user's input
 0000014F  E8 00000000 E		call	ReadInt
					; Compare it to the global boundaries
 00000154  83 F8 0A			cmp		eax, min
 00000157  7C BD			jl		getData_pushBack
 00000159  3D 000000C8			cmp		eax, max
 0000015E  7F B6			jg		getData_pushBack
					
					; The input is valid, move it into the numElements passed by reference
 00000160  8B 55 08			mov		edx, [ebp+8]
 00000163  89 02			mov		[edx] ,eax
					
 00000165  E8 00000000 E		call Crlf
 0000016A  E8 00000000 E		call Crlf
					
					; restore eax and edx
 0000016F  58				pop		eax
 00000170  5A				pop		edx
 00000171  5D				pop		ebp
 00000172  C2 0014			ret 20
 00000175			getData	ENDP

				;Procedure to fill the array with random numbers
				;Receives: the offset of the start of the array and the number of elements
				; 	passed by value on the system stack
				;Returns: the array is filled in memory
				;Preconditions: the Irvine32 libary function Randomize is called to seed
				; 	the pseudorandom number generator
				;Registers Changed: none
 00000175			fillArray PROC
 00000175  55				push	ebp
 00000176  8B EC			mov		ebp, esp
					
					; Save general registers
 00000178  50				push	eax
 00000179  51				push	ecx
					
					; Save edi
 0000017A  57				push	edi
					
					
 0000017B  8B 4D 0C			mov		ecx, [ebp+12]
 0000017E  8B 7D 08			mov		edi, [ebp+8]
 00000181			fillArray_loop:
					; Prime RandomRange procedure
 00000181  B8 000003E7			mov		eax, hi
 00000186  83 E8 64			sub		eax, lo
 00000189  83 E8 01			sub		eax, 1
 0000018C  E8 00000000 E		call	RandomRange
 00000191  83 C0 64			add		eax, lo
 00000194  89 07			mov		[edi], eax
 00000196  83 C7 04			add		edi, 4
 00000199  E2 E6			loop	fillArray_loop
					
					; restore edi
 0000019B  5F				pop		edi
					; Restore general registers
 0000019C  59				pop		ecx
 0000019D  58				pop		eax
					
 0000019E  5D				pop		ebp
 0000019F  C2 0008			ret 8
 000001A2			fillArray ENDP

				;Procedure to sort the array of random integers
				;Receives: The offset of the array of integers and the number of elements
				; 	in the array passed on the system stack
				;Returns: A sorted array in memory
				;Preconditions: The array and number of elements are passed in the correct order
				;	on the stack
				;Registers Changed: none
 000001A2			sortList PROC
 000001A2  55				push 	ebp
 000001A3  8B EC			mov		ebp, esp
					
					; save registers
 000001A5  52				push	edx
 000001A6  53				push	ebx
 000001A7  50				push 	eax
 000001A8  51				push	ecx
 000001A9  56				push 	esi
 000001AA  57				push	edi
					
					; Selection Sort
					
					; Prime Outer Loop
 000001AB  8B 4D 0C			mov		ecx, [ebp+12]
 000001AE  83 E9 01			sub		ecx, 1
 000001B1  8B 75 08			mov		esi, [ebp+8]
 000001B4  BA 00000000			mov		edx, 0
					
					; Outer Loop
					; use eax to have address of highest element
 000001B9			sortList_outerLoop:	
 000001B9  8B C6			mov		eax, esi
					
					; Save the outer loop's ecx
 000001BB  51				push 	ecx
					
					; Inner loop

					; set inner loop index to be outer loop index + 1
 000001BC  8B FE			mov		edi, esi
 000001BE  83 C7 04			add		edi, 4
					
					; set inner loop counter to be total count - currentIndex - 1
 000001C1  8B 5D 0C			mov		ebx, [ebp+12]
 000001C4  83 EB 01			sub		ebx, 1
 000001C7  2B DA			sub		ebx, edx
 000001C9  8B CB			mov		ecx, ebx

 000001CB			sortList_innerLoop:
					; Put the value of the max index into ebx
 000001CB  8B 18			mov		ebx, [eax]
					; compare the value of the max index to edi
 000001CD  3B 1F			cmp		ebx, [edi]
					; if it doesn't need to be updated, jump
 000001CF  7D 02			jge		sortList_dontUpdateMaxIndex
					; else, we update the max so far to be edi
 000001D1  8B C7			mov		eax, edi
					
 000001D3			sortList_dontUpdateMaxIndex:	
					; increment the pointer to the current element and loop
 000001D3  83 C7 04			add		edi, 4
 000001D6  E2 F3			loop	sortList_innerLoop
					
					
					; restore outer loop ecx
 000001D8  59				pop		ecx
					
 000001D9  50				push	eax
 000001DA  56				push	esi
 000001DB  E8 00000010			call	exchange
					
					; increment current index and loop
 000001E0  42				inc		edx	
 000001E1  83 C6 04			add		esi, 4
 000001E4  E2 D3			loop	sortList_outerLoop
					
					; restore registers
 000001E6  5F				pop 	edi
 000001E7  5E				pop		esi
 000001E8  59				pop		ecx
 000001E9  58				pop		eax
 000001EA  5B				pop		ebx
 000001EB  5A				pop		edx
					
 000001EC  5D				pop 	ebp
 000001ED  C2 0008			ret 8
 000001F0			sortList ENDP

				;Procedure to exchange to elements in memory. Used for sorting.
				;Receives: the offsets of two elements to be exchanged on the stack
				;Returns: an array where the two elements are exchanged in memory
				;Preconditions: the two offsets are passed on the stack
				;Registers Changed: none
 000001F0			exchange PROC
 000001F0  55				push	ebp
 000001F1  8B EC			mov		ebp, esp
					; Save off registers
 000001F3  50				push	eax
 000001F4  53				push	ebx
 000001F5  52				push	edx
					
					; put i and j into eax and ebx
 000001F6  8B 45 08			mov		eax, [ebp+8]
 000001F9  8B 5D 0C			mov		ebx, [ebp+12]
					; use edx as temp for list[i]
 000001FC  8B 10			mov		edx, [eax]
					; exchange list[j] and temp
 000001FE  87 13			xchg	edx, [ebx]
					; move temp to list[i]
 00000200  89 10			mov		[eax],edx
					
					; Restore registers
 00000202  5A				pop		edx
 00000203  5B				pop		ebx
 00000204  58				pop		eax
 00000205  5D				pop		ebp
 00000206  C2 0008			ret 8
 00000209			exchange ENDP

				;Procedure to calculate and display the median
				;Receives: the offset of: the array and the median string as well as
				;	the value of the number of elements passed on the stack
				;Returns: nothing
				;Preconditions: The array is sorted.
				;	The array and number of elements are passed on the stack
				; 	in the correct order
				;Registers Changed: none
 00000209			displayMedian PROC
 00000209  55				push	ebp
 0000020A  8B EC			mov		ebp, esp
					
					; Save registers
 0000020C  50				push	eax
 0000020D  52				push	edx
 0000020E  53				push	ebx
 0000020F  56				push	esi
 00000210  57				push	edi
					
					; Display the median string
 00000211  8B 55 10			mov		edx, [ebp+16]
 00000214  E8 00000000 E		call	WriteString
					
 00000219  8B 75 08			mov		esi, [ebp+8]
					
					; Divide the number of elements by 2
 0000021C  BA 00000000			mov		edx, 0
 00000221  8B 45 0C			mov		eax, [ebp+12]
 00000224  BB 00000002			mov		ebx, 2
 00000229  F7 F3			div		ebx
					
					; Compare the remainder to 1
 0000022B  83 FA 01			cmp		edx, 1
					; Jump if the number is odd and we dont need to calculate the average
 0000022E  74 28			je		displayMedian_noCalculation
					
					; multiply the index by 4
 00000230  BB 00000004			mov		ebx, 4
 00000235  BA 00000000			mov		edx, 0
 0000023A  F7 E3			mul		ebx
					
					; add the sized index to the source operand
 0000023C  03 F0			add		esi, eax
 0000023E  83 EE 04			sub		esi, 4
					
					; set the other index to be the current and then add so we have the next element
 00000241  8B FE			mov		edi, esi
 00000243  83 C7 04			add 	edi, 4
					
					; get the average of the two elements
 00000246  BA 00000000			mov 	edx, 0
 0000024B  8B 07			mov		eax, [edi]
 0000024D  03 06			add		eax, [esi]
 0000024F  BB 00000002			mov		ebx, 2
 00000254  F7 F3			div		ebx
					
					; jump to the end so we can display it
 00000256  EB 10			jmp		displayMedian_end
					
 00000258			displayMedian_noCalculation:
					; multiply the index by 4
 00000258  BB 00000004			mov		ebx, 4
 0000025D  BA 00000000			mov		edx, 0
 00000262  F7 E3			mul		ebx
					
					; add the sized index to the source operand
 00000264  03 F0			add		esi, eax
					; move this to eax so that we can print the median
 00000266  8B 06			mov		eax, [esi]

 00000268			displayMedian_end:
					
 00000268  E8 00000000 E		call	WriteDec
 0000026D  E8 00000000 E		call	Crlf


					; Restore Registers
 00000272  5F				pop		edi
 00000273  5E				pop		esi
 00000274  5B				pop		ebx
 00000275  5A				pop		edx
 00000276  58				pop		eax
					
 00000277  5D				pop		ebp
 00000278  C2 000C			ret 12
 0000027B			displayMedian ENDP

				;Procedure to display a list of integers
				;Receives: the offsets of: the array, the string describing the array, 
				;	a string so we can space the elements, as well as the number of elements
				;	passed by value on the stack
				;Returns: nothing
				;Preconditions: everything is passed on the stack in the correct order
				;Registers Changed: none
 0000027B			displayList PROC
 0000027B  55				push	ebp
 0000027C  8B EC			mov		ebp, esp

					; Save eax, ecx, edx, ebx and esi
 0000027E  50				push 	eax
 0000027F  51				push	ecx
 00000280  52				push	edx
 00000281  53				push	ebx
 00000282  56				push	esi

					; Show Title
 00000283  8B 55 10			mov		edx, [ebp+16]
 00000286  E8 00000000 E		call	WriteString
 0000028B  E8 00000000 E		call	Crlf
					
					; Prime Loop
 00000290  8B 4D 0C			mov		ecx, [ebp+12]
 00000293  8B 75 08			mov		esi, [ebp+8]
 00000296  BB 00000000			mov		ebx, 0
					
 0000029B			displayList_loop:	
					; Display the current element
 0000029B  8B 06			mov		eax, [esi]
 0000029D  E8 00000000 E		call	WriteDec
 000002A2  8B 55 14			mov		edx, [ebp+20]
 000002A5  E8 00000000 E		call	WriteString
					; find out how many elments we have printed
 000002AA  43				inc		ebx
					; increment our index counter
 000002AB  83 C6 04			add		esi, 4
					
					; Determine if we need to go to the next line
 000002AE  83 FB 0A			cmp		ebx, 10
 000002B1  7C 0A			jl		displayList_sameLine
					
					; We need a new line, call Crlf and reset the line counter
 000002B3  E8 00000000 E		call	Crlf
 000002B8  BB 00000000			mov		ebx,0
					
 000002BD			displayList_sameLine:
 000002BD  E2 DC			loop	displayList_loop
					
 000002BF  E8 00000000 E		call	Crlf
 000002C4  E8 00000000 E		call	Crlf
					
					; Restore eax, ecx, edx, ebx and esi
 000002C9  5E				pop 	esi
 000002CA  5B				pop		ebx
 000002CB  5A				pop		edx
 000002CC  59				pop		ecx
 000002CD  58				pop		eax
					
 000002CE  5D				pop		ebp
 000002CF  C2 0010			ret		16
 000002D2			displayList ENDP

				;Procedure to say goodbye
				;Receives: offset of goodbye is on the system stack	
				;Returns: nothing
				;Preconditions: the goodbye string is set up
				;Registers Changed: none
 000002D2			farewell PROC
 000002D2  55				push	ebp
 000002D3  8B EC			mov		ebp, esp
 000002D5  52				push	edx
					
 000002D6  8B 55 08			mov		edx, [ebp+8]
 000002D9  E8 00000000 E		call	WriteString
 000002DE  E8 00000000 E		call 	Crlf
					
 000002E3  5A				pop		edx
 000002E4  5D				pop		ebp
 000002E5  C2 0004			ret		4
 000002E8			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/15/16 15:43:09
Program_5     (Program_5.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004DD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002E8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 0000027B _TEXT	Length= 00000057 Public STDCALL
  displayList_loop . . . . . . .	L Near	 0000029B _TEXT	
  displayList_sameLine . . . . .	L Near	 000002BD _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000209 _TEXT	Length= 00000072 Public STDCALL
  displayMedian_noCalculation  .	L Near	 00000258 _TEXT	
  displayMedian_end  . . . . . .	L Near	 00000268 _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001F0 _TEXT	Length= 00000019 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000002D2 _TEXT	Length= 00000016 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 0000002D Public STDCALL
  fillArray_loop . . . . . . . .	L Near	 00000181 _TEXT	
getData  . . . . . . . . . . . .	P Near	 0000010F _TEXT	Length= 00000066 Public STDCALL
  getData_pushBack . . . . . . .	L Near	 00000116 _TEXT	
  getData_validate . . . . . . .	L Near	 00000123 _TEXT	
introduction . . . . . . . . . .	P Near	 000000BB _TEXT	Length= 00000054 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BB Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000001A2 _TEXT	Length= 0000004E Public STDCALL
  sortList_outerLoop . . . . . .	L Near	 000001B9 _TEXT	
  sortList_innerLoop . . . . . .	L Near	 000001CB _TEXT	
  sortList_dontUpdateMaxIndex  .	L Near	 000001D3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000013A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dotdotdot  . . . . . . . . . . .	Byte	 00000120 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000004B0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hi . . . . . . . . . . . . . . .	Number	 000003E7h   
intro_1  . . . . . . . . . . . .	Byte	 00000032 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000071 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 000000B0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lo . . . . . . . . . . . . . . .	Number	 00000064h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max  . . . . . . . . . . . . . .	Number	 000000C8h   
medianString . . . . . . . . . .	Byte	 000004A0 _DATA	
min  . . . . . . . . . . . . . .	Number	 0000000Ah   
numElements  . . . . . . . . . .	DWord	 00000136 _DATA	
out_of_range . . . . . . . . . .	Byte	 00000128 _DATA	
programName  . . . . . . . . . .	Byte	 00000000 _DATA	
programmer . . . . . . . . . . .	Byte	 00000023 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000000F8 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000124 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortedTitle  . . . . . . . . . .	Byte	 0000047C _DATA	
spaces . . . . . . . . . . . . .	Byte	 0000049C _DATA	
unSortedTitle  . . . . . . . . .	Byte	 0000045A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
